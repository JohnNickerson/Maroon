ICommand
	Guid CommandID
	Guid ObjectID
	DateTime TimeStamp
ICommandQueue
	SendCommand
	OnCommandReceived
IQuery
	Update
	OnUpdated

Use SharpSerializer to store individual ICommand objects. Allow them to be synchronised by external file sync processes.
Run a single-instance service to pick up command files and include them in a central command log.
	- This is the one part that feels off to me, but creating a single file should make some actions easier.
	- I could, theoretically, just process a directory of single command files as an API action.
Run many services to keep re-processing that command log to produce query data stores.
Need separate command IDs and object IDs to individually identify each command as well as the object record it relates to (if any).

Challenges:
	- Peer discovery
	- Data storage and sync
		- Delegated to command queue objects.
	- Responsiveness while offline
		- Ability to assume effects of commands until queries are refreshed?
	- Fetch queries registry
	- Master data processor node: necessary, arbitrary, fragile
	
What to send via queues? Commands, data, files.
Broadcast and targeted messaging.

2019-03-21: Build 0.1.2.1 released to Production
	- Better conflict detection.
	- Fixed path use in SharpListSerialiser.
2019-03-27: Build 0.2.0.3 released to Production
	- Previous revision GUIDs rather than integers.
	- Patched to fix conflict resolution.
	- Patched to fix disk file management.
	- Patched to optimise conflict detection algorithm.